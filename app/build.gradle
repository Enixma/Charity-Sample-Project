apply plugin: 'com.android.application'

apply plugin: 'jacoco'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.enixma.sample.charity"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        resValue 'integer', 'CONNECTION_TIMEOUT_IN_SECOND', '10'
        resValue 'integer', 'READ_TIMEOUT_IN_SECOND', '10'
        resValue 'integer', 'WRITE_TIMEOUT_IN_SECOND', '10'
        resValue 'string', 'HEADER_ACCEPT', 'application/json'
        resValue 'string', 'HEADER_CONTENT_TYPE', 'application/json'

    }
    buildTypes {
        debug{
            resValue 'string', 'BASE_URL', 'https://virtserver.swaggerhub.com/chakritw/tamboon-api/1.0.0/'
            resValue 'string', 'CHARITY_LIST_ENDPOINT', 'charities'
            resValue 'string', 'DONATION_ENDPOINT', 'donations'
            resValue 'string', 'OMISE_KEY', 'pkey_test_52d6po3fvio2w6tefpb'
            resValue 'string', 'LOG_REQUEST', 'true'
            testCoverageEnabled true
        }
        release {
            resValue 'string', 'BASE_URL', 'https://virtserver.swaggerhub.com/chakritw/tamboon-api/1.0.0/'
            resValue 'string', 'CHARITY_LIST_ENDPOINT', 'charities'
            resValue 'string', 'DONATION_ENDPOINT', 'donations'
            resValue 'string', 'OMISE_KEY', 'pkey_test_52d6po3fvio2w6tefpb'
            resValue 'string', 'LOG_REQUEST', 'false'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    kapt 'com.android.databinding:compiler:3.0.1'

    // support libs
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'

    // image
    implementation 'com.github.bumptech.glide:glide:3.7.0'

    // acc
    implementation "android.arch.lifecycle:extensions:1.1.0"
    implementation "android.arch.lifecycle:viewmodel:1.1.0"
    implementation "android.arch.lifecycle:livedata:1.1.0"
    implementation "android.arch.lifecycle:reactivestreams:1.1.0"
    kapt "android.arch.lifecycle:compiler:1.1.0"

    // rx
    api 'io.reactivex.rxjava2:rxandroid:2.0.1'
    api 'io.reactivex.rxjava2:rxjava:2.1.6'

    // retrofit
    api 'com.squareup.retrofit2:retrofit:2.3.0'
    api 'com.squareup.retrofit2:converter-gson:2.3.0'
    api 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    api 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    api 'com.google.code.gson:gson:2.8.2'

    // dagger
    api 'com.google.dagger:dagger:2.10'
    kapt 'com.google.dagger:dagger-compiler:2.10'

    // payment
    api 'co.omise:omise-android:2.6.4'
    api 'io.card:android-sdk:5.4.0'

    // test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    testImplementation "org.mockito:mockito-core:2.7.15"

}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group = "Reporting"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def excludes = ['com/enixma/sample/charity/data/**/*',
                    'com/enixma/sample/charity/presentation/**/*',
                    '**/BR.class',
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/databinding/*.class',
                    '**/dagger/*.*',
                    '**/*Injector*.*',
                    '**/*new*.*',
                    '**/*Factory*.*',
                    '**/*ModuleApplication*.*',
                    '**/*Test*.*',
                    'android/**/*.*',
                    '**/*Binding.class',
                    '**/BaseModelTestCase.class',
                    '**/component/*.*',
                    'io/realm/*.class',
                    '**/*Module.*']


    def mainSrc = "${project.projectDir}/src/main/java"
    sourceDirectories = files([mainSrc])

    // generated classes
    classDirectories = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )


    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

